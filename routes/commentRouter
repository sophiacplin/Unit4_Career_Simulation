const express = require('express');
const commentRouter = express.Router();
const {createComment, fetchReviewComments, destroyCommentFromUser, fetchAllComments, updateComment, destroyComment, fetchCommentById} = require('../db.js');
const {authenticateToken} = require('../authenticateMiddleware.js');

//fetch all comment(do not need it in front end)
commentRouter.get('/', async(req, res, next) => {
  try{
    res.send(await fetchAllComments());
  }catch(err){
    next(err);
  }
})


//create a comment by login user
commentRouter.post('/reviews/:id', authenticateToken, async(req, res, next) => {
  const review_id = req.params.id;
  const user_id = req.user.id;
  const text = req.body.text;

  try{
    if(!text || text.trim() === ''){
      return res.status(400).send({message:'Comment text cannot be empty'})
    }
    const newComment = await createComment({review_id, user_id, text});
    res.send({message:'Comment created successfully', newComment});
  }catch(err){
    next(err);
  }
});

//fetch comments of a review
commentRouter.get('/reviews/:id', async(req, res, next) => {
  const review_id = req.params.id;
  try{
    
    const reviewComments = await fetchReviewComments(review_id);
    if(reviewComments.length > 0){
      res.send({reviewComments});
    }else{
      res.status(200).send({message:'There is no comment in this review'});
    }
  }catch(err){
    next(err);
  }
});


//update a comment by user
commentRouter.patch('/:id', authenticateToken, async(req, res, next) => {
  const text = req.body.text;
  const comment_id = req.params.id;
  const user_id = req.user.id;

  try{
    const comment = await fetchCommentById(comment_id)
    if(!comment){
      return res.status(404).send({message: 'Comment not found'});
    }

    if(comment.user_id !== user_id){
      return res.status(403).send({message: 'You are not authorized to update this comment'});
      }

    const updatedComment = await updateComment({text, comment_id, user_id});
    if(updatedComment){
      res.send(updatedComment);
    }else{
      res.status(403).send({message:'You are not authorized to update this comment'})
    }
  }catch(err){
    next(err);
  }
});


//delete a comment
commentRouter.delete('/:id', authenticateToken, async(req, res, next) => {
  const comment_id = req.params.id;
  const user_id = req.user.id;
  const userRole = req.user.role;

  try{
    const comment = await fetchCommentById(comment_id)
    if(!comment){
      return res.status(404).send({message: 'Comment not found'});
    }

    if(comment.user_id !== user_id && userRole!== 'admin'){
      return res.status(403).send({message: 'You are not authorized to delete this comment'});
    }

    const deletedComment = await destroyComment(comment_id);
    if(deletedComment){
      res.send({message:'This comment has been deleted', deletedComment});
    }else{
      res.status(403).send({message:'You are not authorized to delete this comment'});
    }
  }catch(err){
    next(err);
  }
});



module.exports = commentRouter;